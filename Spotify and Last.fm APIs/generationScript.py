import spotipy #This library is for authentication to the Spotify API
from spotipy.oauth2 import SpotifyClientCredentials #Same
from spotipy.oauth2 import SpotifyOAuth #Same
import os #This library is for environment variables
import requests #This library is for making HTTP requests

#These are the environment variables
os.environ['SPOTIPY_CLIENT_ID'] = '#Your client ID'
os.environ['SPOTIPY_CLIENT_SECRET'] = '#Your client secret'
os.environ['LASTFM_API_KEY'] = '#Your Last.fm API key'
os.environ['LASTFM_SHARED_SECRET'] = '#Your Last.fm shared secret'
os.environ['SPOTIPY_REDIRECT_URI'] = '#Your redirect URI, I used localhost and 8080 as a port'


#Here we do the authentication (read about scope in the Spotify API Documentation)
spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope="playlist-modify-public"))


#This function is for getting similar tracks to our songs via the Last.fm API
def getSimilarTracks(api_key=os.getenv('LASTFM_API_KEY')) :
	similar_tracks = {}
	artist = str(input("Give me the artist name : "))
	track = str(input("Give me the track name : "))

	#Here we construct the url and give the artist name and track name we just recuperated
	url = f"http://ws.audioscrobbler.com/2.0/?method=track.getsimilar&artist={artist}&track={track}&autocorrect=1&api_key={api_key}&format=json&limit=50"
	results = requests.get(url).json()


	#After getting the tracks, we take from them their titles and their artist names only
	for track in results['similartracks']['track']:
		track_name = track['name']
		artist_name = track['artist']['name']
		similar_tracks[track_name] = artist_name #Map the data

	return similar_tracks

#This function is for getting the id of the new playlist we create
def getPlaylistID(playlist_name):
	user_playlists = sp.current_user_playlists() #Here we get all the playlists of the user

	#Get the playlist by its name (this is not a good method, as in Spotify you can have two playlists with the same name)
	playlist_id = None
	for playlist in user_playlists['items']:
	    if playlist['name'] == playlist_name:
	        playlist_id = playlist['id']
	        break

	return playlist_id


#This function is for creating new playlists (this is where the scope is used for example)
def createPlaylist(playlist_name):
	user_profile = sp.me()
	user_id = user_profile["id"] #Get my id
	sp.user_playlist_create(user_id, playlist_name, public=True, collaborative=False, description="Playlist generated by my script")



#This function is made to get the URI of a track in Spotify. We will use it to add tracks to a playlist
def getTrackURI(track_name, artist_name):
	'''In the following, we are looking for a song. And to make sure that the song is most likely not live and in the original album,
	we will get the first x search results of the song and use the most popular. This is still not a very good method because I still
	get some live tracks in the playlists''' 
	tracklist = spotify.search(q=f"https://api.spotify.com/v1/search?track={track_name}&artist={artist_name}", limit=15, type="track")
	tracks = {}
	uri = ""
	popularity = 0

	#Here we take the most popular example
	for track in tracklist['tracks']['items']:
			track_uri = track['uri']
			track_popularity = track['popularity']
			tracks[track_uri] = track_popularity

	for key, value in tracks.items():
		if value > popularity:
			uri = key
			popularity = value
	
	return uri

#In this function, we'll group the URIs of tracks in a list. We will do so by using the previous function
def returnListURI(similar_tracks):
	uriList = []

	for key, value in similar_tracks.items():
		track_name = key
		artist_name = value

		uri = getTrackURI(track_name, artist_name)
		uriList.append(uri)

	return uriList

#In this function, we add the tracks to our new playlist by passing the previous list as a parameter
def addPlaylistTracks(user_id, playlist_id, uriList):
	sp.user_playlist_add_tracks(user=user_id, playlist_id=playlist_id, tracks=uriList, position=None)


#In the main, we follow the logic of the whole process by using all of our functions and variables
def main():
	playlist_name = str(input("Give me the playlist name : "))
	similar_tracks = getSimilarTracks()
	user_profile = sp.me()
	user_id = user_profile["id"]
	createPlaylist(playlist_name)
	playlist_id = getPlaylistID(playlist_name)
	uriList = returnListURI(similar_tracks)
	addPlaylistTracks(user_id, playlist_id, uriList)


main() #After I use this script, I generally remove some songs manually from my playlist and edit it to my liking